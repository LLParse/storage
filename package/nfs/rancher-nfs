#!/bin/bash

# Notes:
#  - Please install "jq" package before using this driver.

if [ -e "$(dirname $0)/common.sh" ]; then
    source $(dirname $0)/common.sh
elif [ -e "$(dirname $0)/../common/common.sh" ]; then
    source $(dirname $0)/../common/common.sh
fi

mount_default_share() {
    local mntDest=$1
    must_exist NFS_SERVER "$NFS_SERVER"
    must_exist MOUNT_DIR "$MOUNT_DIR"
    must_exist mntDest "$mntDest"
    mount_nfs "$NFS_SERVER" "$MOUNT_DIR" "$mntDest" "$MOUNT_OPTS"
}

init() {
    init_nfs_client_service
    exit_success
}

tmp_dir() {
    echo "/var/lib/rancher/volumes/rancher-nfs/tmp_$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w5 | head -n1)"
}

create() {
    # if user supplies host:export, we do nothing
    if [ ! -z "${OPTS[host]}" ] && [ ! -z "${OPTS[export]}" ]; then
        exit_success
    fi

    must_exist "OPTS[name]" "${OPTS[name]}"

    local mntDest="$(tmp_dir)"
    mount_default_share "${mntDest}"

    # create sub-directory using name parameter to represent volume
    local subDir="${mntDest}"/"${OPTS[name]}"
    local created=0
    if [ ! -d "${subDir}" ]; then
        mkdir -p "${subDir}"
        created=1
    fi

    unmount_dir "${mntDest}"

    if [ "${created}" == 1 ]; then
        print_options created true name ${OPTS[name]}
    else
        exit_success
    fi
}

delete() {
    if [ -z "${OPTS[created]}" ]; then
        exit_success
    fi

    must_exist "OPTS[name]" "${OPTS[name]}"

    local mntDest="$(tmp_dir)"
    mount_default_share "${mntDest}"

    # delete sub-directory using name parameter to represent volume
    local subDir="${mntDest}"/"${OPTS[name]}"
    if [ -d "$subDir" ]; then
        rm -rf "${subDir}"
    fi

    unmount_dir "${mntDest}"

    exit_success
}

attach() {
    exit_not_supported
}

detach() {
    exit_not_supported
}

mountdest() {
    # host/export supplied by driver_opts
    if [ ! -z "${OPTS[host]}" ] && [ ! -z "${OPTS[export]}" ]; then
        mount_nfs "${OPTS[host]}" "${OPTS[export]}" "${MNT_DEST}" "${OPTS[mntOptions]}"

    # host/export supplied by template questions
    else
        must_exist NFS_SERVER "$NFS_SERVER"
        must_exist MOUNT_DIR "$MOUNT_DIR"
        must_exist "OPTS[name]" "${OPTS[name]}"
        mount_nfs "${NFS_SERVER}" "${MOUNT_DIR}/${OPTS[name]}" "${MNT_DEST}" "${OPTS[mntOptions]}"
    fi
    exit_success
}

unmount() {
    unmount_dir "$MNT_DEST"
    exit_success
}

# Every script must call main as such
main "$@"
